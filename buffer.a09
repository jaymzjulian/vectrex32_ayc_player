Sound_Bytes_x = $f27d
buffer_base = $c882
via_int_flags = $d00d
; This needs to be 2*regs+1, not regs, since
; we need the $ff at the end - so 29 bytes for a
; standard AY
buffer_size = 29
buffer_start = $c884
buffer_end = $c885
num_buffers = 5

  ; irq entry: update VIA and return fast so we dont
  ; hurt lines
  ldd #$1234
  std $d008
  inc $2345
  rti
  
  ; check if our flag is set
  lda $2345
  cmpa #0
  beq no_play
  dec $2345
  
  ; check if we should just skip because we are out of buffers...
  lda $258
  cmpa #num_buffers
  beq no_play
  

  ; update the buffer
  ldu buffer_base
  jsr Sound_Bytes_x
  ; increment the dualport return
  inc $258
  
  ;  ; point to next buffer
  ldd buffer_base
  addd #buffer_size
  ; if we're at the top of the buffer, go back... it's a loop
  ; after all!
  cmpd #buffer_end
  ble buffer_good
  ldd #buffer_start
buffer_good:
  std buffer_base
no_play:
  ; also update timing pointer!
  rts
